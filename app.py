import os
import streamlit as st
from datetime import datetime
from docx import Document
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from dotenv import load_dotenv
<<<<<<< HEAD
import json
import logging

# Define o caminho base do aplicativo
BASE_PATH = os.path.dirname(os.path.abspath(__file__))

# Carrega variÃ¡veis de ambiente
@st.cache_data
def carregar_configuracoes():
    """
    Carrega as configuraÃ§Ãµes do arquivo .env
    Retorna um dicionÃ¡rio com as configuraÃ§Ãµes de email
    """
    load_dotenv(os.path.join(BASE_PATH, '.env'))
=======
import logging

# ConfiguraÃ§Ã£o de logging
logging.basicConfig(
    filename='form_log.txt',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# FunÃ§Ã£o para carregar variÃ¡veis de ambiente
def carregar_configuracoes():
    load_dotenv()
>>>>>>> 0c841604f3c688242e0cf9b3f0e7e10c46c8b6e3
    return {
        "EMAIL_USER": os.getenv("EMAIL_USER"),
        "EMAIL_PASS": os.getenv("EMAIL_PASS"),
        "EMAIL_SMTP": os.getenv("EMAIL_SMTP"),
        "EMAIL_PORT": int(os.getenv("EMAIL_PORT", 587))
    }

<<<<<<< HEAD
# ConfiguraÃ§Ã£o de logging
logging.basicConfig(
    filename=os.path.join(BASE_PATH, 'form_log.txt'),
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Cria diretÃ³rio para arquivos se nÃ£o existir
ARQUIVOS_DIR = os.path.join(BASE_PATH, 'arquivos')
os.makedirs(ARQUIVOS_DIR, exist_ok=True)

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(
    page_title="FormulÃ¡rio de PrÃ©-AvaliaÃ§Ã£o NeuropsicolÃ³gica",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# TÃ­tulo e instruÃ§Ãµes iniciais
st.title("FormulÃ¡rio de PrÃ©-AvaliaÃ§Ã£o NeuropsicolÃ³gica")

st.markdown("""
Este formulÃ¡rio tem como objetivo coletar informaÃ§Ãµes iniciais para sua avaliaÃ§Ã£o neuropsicolÃ³gica.  
Os dados serÃ£o mantidos sob sigilo e utilizados apenas para fins clÃ­nicos, conforme o CÃ³digo de Ã‰tica Profissional do PsicÃ³logo (CFP) e a ResoluÃ§Ã£o CFP nÂº 11/2018.
""") 
=======
# FunÃ§Ã£o para gerar documento Word
def gerar_documento(nome, data_avaliacao, email, telefone, data_nasc, idade, sexo, cidade_nasc, estado_nasc,
                     endereco, mao_escrita, idiomas, encaminhamento, queixas, sintomas, condicoes_medicas,
                     cancer_info, psiquiatria_info, outras_condicoes, usa_medicacao, medicacoes,
                     historico_medico, historico_familiar, desenvolvimento_infantil, historico_escolar,
                     emocional_sono, emocional_apetite, emocional_humor, emocional_estresse,
                     uso_neuro, observacoes):
    nome_sanitizado = nome.strip().replace(" ", "_")
    filename = f"avaliacao_{nome_sanitizado}.docx"
    doc = Document()

    doc.add_heading(f"PrÃ©-AvaliaÃ§Ã£o NeuropsicolÃ³gica: {nome}", level=1)
    doc.add_paragraph(f"Data da AvaliaÃ§Ã£o: {data_avaliacao.strftime('%d/%m/%Y')}")
    doc.add_paragraph(f"E-mail: {email if email else 'NÃ£o informado'}")
    doc.add_paragraph(f"Telefone: {telefone if telefone else 'NÃ£o informado'}")
    doc.add_paragraph(f"Nascimento: {data_nasc.strftime('%d/%m/%Y')}  (Idade: {idade})")
    doc.add_paragraph(f"Sexo: {sexo}")
    doc.add_paragraph(f"Cidade/Estado de nascimento: {cidade_nasc}/{estado_nasc}")
    doc.add_paragraph(f"EndereÃ§o: {endereco if endereco else 'NÃ£o informado'}")
    doc.add_paragraph(f"MÃ£o dominante: {mao_escrita}")
    idi_list = [i for i in idiomas if i != "NÃ£o"]
    doc.add_paragraph(f"Idiomas: {', '.join(idi_list) if idi_list else 'Nenhum'}")
    doc.add_paragraph(f"Encaminhado por: {encaminhamento if encaminhamento else 'Nenhum'}")

    doc.add_page_break()
    doc.add_heading("2. Queixas Principais", level=2)
    doc.add_paragraph(queixas if queixas else "Nenhuma")

    doc.add_page_break()
    doc.add_heading("3. Sintomas Cognitivos", level=2)
    for pergunta, resposta in sintomas.items():
        doc.add_paragraph(f"{pergunta}: {resposta}")

    doc.add_page_break()
    doc.add_heading("4. HistÃ³rico MÃ©dico", level=2)
    doc.add_paragraph(f"CondiÃ§Ãµes MÃ©dicas: {', '.join(condicoes_medicas) if condicoes_medicas else 'Nenhuma'}")
    if cancer_info: doc.add_paragraph(f"Tipo de cÃ¢ncer: {cancer_info}")
    if psiquiatria_info: doc.add_paragraph(f"DiagnÃ³stico psiquiÃ¡trico: {psiquiatria_info}")
    if outras_condicoes: doc.add_paragraph(f"Outras condiÃ§Ãµes: {outras_condicoes}")
    doc.add_paragraph(f"Uso de MedicaÃ§Ãµes: {usa_medicacao} - {medicacoes if medicacoes else 'Nenhum'}")
    doc.add_paragraph(f"HistÃ³rico MÃ©dico Pessoal: {historico_medico}")
    doc.add_paragraph(f"HistÃ³rico MÃ©dico Familiar: {historico_familiar}")

    doc.add_page_break()
    doc.add_heading("5. Desenvolvimento Infantil", level=2)
    doc.add_paragraph(desenvolvimento_infantil)

    doc.add_page_break()
    doc.add_heading("6. Desenvolvimento Escolar", level=2)
    doc.add_paragraph(historico_escolar)

    doc.add_page_break()
    doc.add_heading("7. Aspectos Emocionais", level=2)
    doc.add_paragraph(f"Sono: {emocional_sono}")
    doc.add_paragraph(f"Apetite: {emocional_apetite}")
    doc.add_paragraph(f"Humor: {emocional_humor}")
    doc.add_paragraph(f"Estresse: {emocional_estresse}")

    doc.add_page_break()
    doc.add_heading("8. Uso de Neurotecnologias", level=2)
    doc.add_paragraph(uso_neuro)

    doc.add_page_break()
    doc.add_heading("9. ObservaÃ§Ãµes Finais", level=2)
    doc.add_paragraph(observacoes)

    doc.save(filename)
    return filename
# FunÃ§Ã£o para envio de e-mail (mantida como estÃ¡)

# UI Streamlit
def main():
    st.set_page_config(page_title="FormulÃ¡rio de PrÃ©-AvaliaÃ§Ã£o", layout="wide")
    st.title("FormulÃ¡rio de PrÃ©-AvaliaÃ§Ã£o NeuropsicolÃ³gica")
    st.markdown("Este formulÃ¡rio coleta dados iniciais para avaliaÃ§Ã£o neuropsicolÃ³gica.")

    if st.checkbox("Concordo com o uso das informaÃ§Ãµes para fins de avaliaÃ§Ã£o psicolÃ³gica."):
        with st.form("form_avaliacao"):
            st.subheader("1. Dados Pessoais")
            col1, col2, col3 = st.columns(3)
            with col1:
                nome = st.text_input("Nome completo")
            with col2:
                email = st.text_input("E-mail")
            with col3:
                telefone = st.text_input("Telefone")

            col4, col5, col6 = st.columns(3)
            with col4:
                data_avaliacao = st.date_input("Data da AvaliaÃ§Ã£o", datetime.today())
            with col5:
                data_nasc = st.date_input("Data de Nascimento", min_value=datetime(1900,1,1), max_value=datetime.today())
            with col6:
                idade = st.number_input("Idade", min_value=0, max_value=120)

            col7, col8, col9 = st.columns(3)
            with col7:
                sexo = st.selectbox("Sexo", ["Masculino", "Feminino", "Outro"])
            with col8:
                cidade_nasc = st.text_input("Cidade de nascimento")
            with col9:
                estado_nasc = st.text_input("Estado de nascimento")

            endereco = st.text_input("EndereÃ§o completo")
            mao_escrita = st.radio("MÃ£o dominante", ["Direita", "Esquerda", "Ambidestro"])
            idiomas = st.multiselect("Idiomas falados", ["NÃ£o", "InglÃªs", "Espanhol", "FrancÃªs", "Outro"])
            encaminhamento = st.text_input("Encaminhado por")

            st.subheader("2. Queixas Principais")
            queixas = st.text_area("Descreva brevemente o motivo da avaliaÃ§Ã£o")

            st.subheader("3. Sintomas Cognitivos")
            sintomas = {}
            for pergunta in [
                "Dificuldade de concentraÃ§Ã£o",
                "Esquecimento frequente",
                "LentidÃ£o no raciocÃ­nio",
                "Perda de objetos",
                "RepetiÃ§Ã£o de perguntas",
                "Dificuldade de foco",
                "SensaÃ§Ã£o de desorientaÃ§Ã£o",
                "Dificuldade para resolver problemas",
                "Necessidade de lembretes",
                "CansaÃ§o mental excessivo",
                "Troca de palavras",
                "Anomia"]:
                sintomas[pergunta] = st.radio(pergunta, ["Sim", "NÃ£o"], key=pergunta)

            with st.expander("ðŸ“Œ HistÃ³rico MÃ©dico"):
                condicoes_medicas = st.multiselect("CondiÃ§Ãµes mÃ©dicas", [
                    "HipertensÃ£o arterial", "Diabetes", "DoenÃ§as cardÃ­acas", "DoenÃ§as neurolÃ³gicas",
                    "DoenÃ§as psiquiÃ¡tricas", "CÃ¢ncer", "Outra(s) condiÃ§Ã£o(Ãµes) relevante(s)"])

                cancer_info = st.text_input("Tipo de cÃ¢ncer") if "CÃ¢ncer" in condicoes_medicas else ""
                psiquiatria_info = st.text_input("DiagnÃ³stico psiquiÃ¡trico") if "DoenÃ§as psiquiÃ¡tricas" in condicoes_medicas else ""
                outras_condicoes = st.text_input("Outras condiÃ§Ãµes") if "Outra(s) condiÃ§Ã£o(Ãµes) relevante(s)" in condicoes_medicas else ""
                usa_medicacao = st.radio("Uso de medicaÃ§Ã£o?", ["Sim", "NÃ£o"])
                medicacoes = st.text_area("InformaÃ§Ãµes sobre medicamentos")
                historico_medico = st.text_area("HistÃ³rico mÃ©dico atual e passado")
                historico_familiar = st.text_area("HistÃ³rico mÃ©dico familiar")

            with st.expander("ðŸ§  Desenvolvimento e Escolaridade"):
                desenvolvimento_infantil = st.text_area("Desenvolvimento infantil")
                historico_escolar = st.text_area("Desenvolvimento escolar")

            st.subheader("7. Aspectos Emocionais")
            emocional_sono = st.radio("AlteraÃ§Ãµes de sono", ["Sim", "NÃ£o"])
            emocional_apetite = st.radio("AlteraÃ§Ãµes de apetite", ["Sim", "NÃ£o"])
            emocional_humor = st.radio("OscilaÃ§Ãµes de humor", ["Sim", "NÃ£o"])
            emocional_estresse = st.radio("NÃ­vel de estresse", ["Baixo", "Moderado", "Alto"])

            uso_neuro = st.text_area("Uso de neurotecnologias")
            observacoes = st.text_area("ObservaÃ§Ãµes finais")

            enviado = st.form_submit_button("Enviar AvaliaÃ§Ã£o")

            if enviado:
                if not nome.strip():
                    st.warning("O campo 'Nome completo' Ã© obrigatÃ³rio.")
                    st.stop()
                if not email.strip():
                    st.warning("O campo 'E-mail' Ã© obrigatÃ³rio.")
                    st.stop()

                try:
                    arquivo = gerar_documento(
                        nome, data_avaliacao, email, telefone, data_nasc, idade, sexo, cidade_nasc, estado_nasc,
                        endereco, mao_escrita, idiomas, encaminhamento, queixas, sintomas, condicoes_medicas,
                        cancer_info, psiquiatria_info, outras_condicoes, usa_medicacao, medicacoes,
                        historico_medico, historico_familiar, desenvolvimento_infantil, historico_escolar,
                        emocional_sono, emocional_apetite, emocional_humor, emocional_estresse,
                        uso_neuro, observacoes)

                    st.success(f"Arquivo '{arquivo}' gerado com sucesso!")
                    with open(arquivo, "rb") as f:
                        st.download_button("ðŸ“„ Baixar AvaliaÃ§Ã£o", f, file_name=arquivo)

                    if email:
                        try:
                            enviar_email(email, f"AvaliaÃ§Ã£o de {nome} â€“ {data_avaliacao.strftime('%d/%m/%Y')}", arquivo)
                            st.success("E-mail enviado com sucesso!")
                        except Exception as e:
                            st.warning(f"NÃ£o foi possÃ­vel enviar o e-mail: {e}")

                except Exception as e:
                    st.error(f"Erro ao processar o formulÃ¡rio: {e}")

if __name__ == "__main__":
    main()
>>>>>>> 0c841604f3c688242e0cf9b3f0e7e10c46c8b6e3
